#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math


class SlidingWindow:
    def __init__(self):
        self.c = 1

    def increaseWindow(self):
        self.c += 1

    def getWindow(self):
        return self.c

    def balanceWindow(self):
        self.c = self.c + 1 / self.c

    def resetWindow(self):
        self.c = 1


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.currCount = 0
        self.remote_host = None
        self.remote_port = None
        self.MSGPrinted = []
        self.MSGtoPrint = {}
        self.window = SlidingWindow()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't already have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log("Received data message %s" % msg)

                if msg['seq'] not in self.MSGtoPrint:
                    # Always send back an ack
                    self.send({"type": "ack", "seq": msg['seq']})

                    if msg['seq'] == self.currCount:
                        # Print out the data to stdout
                        print(msg["data"], end='', flush=True)
                        # Added printed message
                        self.MSGPrinted.append(msg)
                        self.currCount += 1

                    while self.currCount in self.MSGtoPrint.keys():
                        print(self.MSGtoPrint.get(self.currCount), end='', flush=True)
                        self.currCount += 1

                    else:
                        self.MSGtoPrint[msg['seq']] = msg['data']



        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()
