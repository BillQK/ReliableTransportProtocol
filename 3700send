#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

DATA_SIZE = 1375


class SlidingWindow:
    def __init__(self):
        self.c = 2

    def increaseWindow(self):
        self.c += 1

    def getWindow(self):
        return self.c

    def balanceWindow(self):
        self.c = int(self.c + 1 / self.c)

    def resetWindow(self):
        self.c = 1


class Sender:
    def __init__(self, host, port):

        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window = SlidingWindow()
        self.seq = 0
        self.LoD = []
        self.LoDTBA = {}
        self.LoAR = []
        self.LoT = {}

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def receiveAckForAllPacket(self):
        return self.LoAR == self.seq

    def startpackettimer(self, sequence, timer):
        timeout = 1.0
        elapsed = time.time() - timer
        while elapsed <= timeout:
            if sequence in self.LoAR:
                return
            elapsed = time.time() - timer

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    # receiving window
                    for i in range(0, self.window.getWindow()):
                        self.socket.settimeout(1.0)

                        try:
                            k, addr = conn.recvfrom(65535)
                            msg = k.decode('utf-8')
                            try:
                                msg = json.loads(msg)
                                self.log("Received message '%s'" % msg)

                                self.LoAR.append(msg['seq'])

                                if msg['seq'] in self.LoDTBA:
                                    del self.LoDTBA[msg['seq']]
                                    del self.LoT[msg['seq']]

                                self.waiting = False

                            except:
                                self.log("Dropped a packet")

                        except socket.timeout as err:
                            #once we get a socket timeout, we need to retransmit something...
                            #therefore we switch to that section...
                            self.waiting = False

                elif conn == sys.stdin:
                    # get all the data to be sent
                    while True:
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0:
                            break

                        self.LoD.append(data)

                    print("this is what our list of time looks like at each interval: " + str(self.LoT))    


                    # check if all data is already send
                    if self.seq == len(self.LoD):
                        self.log("All done!")

                        sys.exit(0)

                    # sending window
                    for i in range(0, self.window.getWindow()):

                        if(len(self.LoT) > 0):
                            for k,v in self.LoT.items():
                                if(time.time() - v > 1.0):
                                    data1 = self.LoD[k]
                                    #print("made it here:" + str(k))
                                    #it works ish, but some of the acks don't come in and not sure why,
                                    #for instance with the tests, 8 and 10 didn't come in although the data was sent 
                                    #and waiting on acks for those.
                                    msg1= {"type": "msg", "seq": k, "data": data1}
                                    self.send(msg1)  

                        if self.seq < len(self.LoD):
                            # get data from seq
                            data = self.LoD[self.seq]
                            #hashing = hashlib.md5(data.encode('utf-8')).hexdigest()

                        else:
                            break

                        msg = {"type": "msg", "seq": self.seq, "data": data}
                        # get data hash it, attach it to payload, then the recv has to decode it itself.

                        self.log("Sending message '%s'" % msg)

                        self.send(msg)
                        self.LoT[self.seq] = time.time()

                        self.seq += 1

                        # add to data to be ack
                        self.LoDTBA[msg['seq']] = data

                    self.waiting = True

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
