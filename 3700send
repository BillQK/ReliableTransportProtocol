#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375


class SlidingWindow:
    def __init__(self):
        self.c = 2

    def increaseWindow(self):
        self.c += 1

    def getWindow(self):
        return self.c

    def balanceWindow(self):
        self.c = int(self.c + 1 / self.c)

    def resetWindow(self):
        self.c = 1


class Sender:
    def __init__(self, host, port):

        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window = SlidingWindow()
        self.seq = 0
        self.LoD = []
        self.LoDTBA = {}
        self.LoAR = []
        self.rtt = 1.0
        self.retransmit = False
        self.LoT = {}

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def receiveAckForAllPacket(self):
        return self.LoAR == self.seq

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    try:
                        #use rtt on each packet instead, only check the times from past retransmissions,
                        #check rtt log, then packet has been dropped,
                        #make sure to keep track the logs of the packets and check the times, append the rtt log
                        #keep another structure for that, just a table, rtt log will keep the start time, and based on that time
                        #we can compare with the rtt whether the time has been dropped, 

                        #one queue message queue, slider over the whole queue, size four, and that is limit on queue on messages
                        #currently we have four and if there are any missing acks resend but if succesful window has been completed 
                        #then we shift, based on having too many drops, then we will 
                        # increment/divide window size based on the droppped packet size

                        #receiving window
                        #without the window the packets come back in wayyy too fast


                        self.socket.settimeout(self.rtt)
                        #for i in range(0, self.window.getWindow()):
                        k, addr = conn.recvfrom(65535)
                        msg = k.decode('utf-8')

                        msg = json.loads(msg)
                        self.log("Received message '%s'" % msg)

                        self.LoAR.append(msg['seq'])

                        if msg['seq'] in self.LoDTBA:
                            del self.LoDTBA[msg['seq']]
                            del self.LoT[msg['seq']]
                            #but if we don't get the sequence back then we can 
                            #retransmit the given packet for the next highest sequence number that hasn't been acked.  

                        self.waiting = False
                        
                    except:
                        #print("made it into here!")
                        self.retransmit = True
                        self.waiting  = False
                        break   

                elif conn == sys.stdin:
                    # get all the data to be sent
                    while True:
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0:
                            break
                        self.LoD.append(data)

                    # check if all data is already send
                    if self.seq == len(self.LoD):
                        self.log("All done!")

                        sys.exit(0)

                    #we need to have to have some way of knowing that we need to retransmit a packet 
                    # why doesn't this part    
                    if self.retransmit:
                        for k, v in self.LoT.items():
                            if(time.time() - v > self.rtt):
                                data = self.LoD[k]
                                msg = {"type" : "msg", "seq" : k,  "data": data }
                                print("this is the messsage that we created: "+ str(msg))
                                self.send(msg)


                        #we need to get the correct data packet associated
                        #counter, and then increase from 0 to sequence is, loDa it will be in order
                        #latestunacked = len(self.LoAR)
                        #data = self.LoD[latestunacked] 
                    
                        self.retransmit = False
                        self.waiting = True
                        break
                    #check for rtt, whether differnce difference is 

                    # sending window
                    #keep track of packet number we are sending in the window,
                    # or just shifting whole window for next four
                    for i in range(0, self.window.getWindow()):
                        if self.seq < len(self.LoD):
                            # get data from seq
                            data = self.LoD[self.seq]
                        else:
                            break

                        msg = {"type": "msg", "seq": self.seq, "data": data}

                        self.log("Sending message '%s'" % msg)

                        self.send(msg)
                        self.LoT[self.seq] = time.time()

                        self.seq += 1

                        # add to data to be ack
                        self.LoDTBA[msg['seq']] = data
                        #we have a to be acked

                    self.waiting = True


        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
